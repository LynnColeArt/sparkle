# Smart Makefile for Sparkle
# Detects platform and builds accordingly

# Base settings
FC = gfortran
CC = gcc
BASE_FFLAGS = -O3 -fopenmp -march=native -funroll-loops -ftree-vectorize -ffast-math -Wall
BASE_CFLAGS = -O2 -Wall

# Detect OS
UNAME_S := $(shell uname -s)
UNAME_M := $(shell uname -m)

# Platform-specific settings
ifeq ($(UNAME_S),Linux)
    PLATFORM = LINUX
    
    # Check for AMD GPU
    GPU_VENDOR := $(shell cat /sys/class/drm/card0/device/vendor 2>/dev/null)
    ifeq ($(GPU_VENDOR),0x1002)
        GPU_TYPE = AMD
        # Check available libraries
        HAS_OPENGL := $(shell test -f /usr/lib/x86_64-linux-gnu/libGL.so.1 && echo yes)
        HAS_VULKAN := $(shell test -f /usr/lib/x86_64-linux-gnu/libvulkan.so.1 && echo yes)
        
        ifeq ($(HAS_OPENGL),yes)
            LDFLAGS += -lGL -lEGL
            CFLAGS += -DHAS_OPENGL
            GPU_BACKEND = opengl
        endif
        
        ifeq ($(HAS_VULKAN),yes)
            LDFLAGS += -lvulkan
            CFLAGS += -DHAS_VULKAN
            GPU_BACKEND_ALT = vulkan
        endif
    endif
    
else ifeq ($(UNAME_S),Darwin)
    PLATFORM = MACOS
    GPU_TYPE = APPLE
    LDFLAGS = -framework Metal -framework Foundation -framework CoreGraphics
    CFLAGS += -DHAS_METAL
    GPU_BACKEND = metal
endif

# Build directories
BUILD_DIR = build/$(PLATFORM)
SRC_DIR = src
EXAMPLES_DIR = examples

# Create build directory
$(shell mkdir -p $(BUILD_DIR))
$(shell mkdir -p $(BUILD_DIR)/reference)
$(shell mkdir -p $(BUILD_DIR)/production)

# Common modules (platform-independent)
COMMON_MODULES = \
    $(SRC_DIR)/sparkle_types.f90 \
    $(SRC_DIR)/sparkle_mesh_types.f90 \
    $(SRC_DIR)/sparkle_error_handling.f90 \
    $(SRC_DIR)/sparkle_config.f90 \
    $(SRC_DIR)/sparkle_memory.f90 \
    $(SRC_DIR)/sparkle_kernels.f90 \
    $(SRC_DIR)/sparkle_safe_kernels.f90 \
    $(SRC_DIR)/sparkle_platform.f90 \
    $(SRC_DIR)/gl_constants.f90 \
    $(SRC_DIR)/sparkle_gpu_kernels.f90 \
    $(SRC_DIR)/sparkle_glsl_generator.f90 \
    $(SRC_DIR)/sparkle_rdna_shader_generator.f90 \
    $(SRC_DIR)/sparkle_dynamic_shader_system.f90 \
    $(SRC_DIR)/sparkle_adaptive_kernel.f90 \
    $(SRC_DIR)/sparkle_kernel_variants.f90 \
    $(SRC_DIR)/sparkle_shader_parser.f90 \
    $(SRC_DIR)/sparkle_fortran_shaders.f90 \
    $(SRC_DIR)/sparkle_fortran_params.f90 \
    $(SRC_DIR)/sparkle_shader_parser_v2.f90 \
    $(SRC_DIR)/sparkle_fortran_shaders_v2.f90

# Platform-specific modules
ifeq ($(PLATFORM),LINUX)
    ifeq ($(GPU_TYPE),AMD)
        PLATFORM_MODULES = \
            $(SRC_DIR)/sparkle_gpu_safe_detect.f90 \
            $(SRC_DIR)/sparkle_gpu_backend_detect.f90 \
            $(SRC_DIR)/sparkle_gpu_backend.f90 \
            $(SRC_DIR)/sparkle_amdgpu_direct.f90 \
            $(SRC_DIR)/sparkle_amdgpu_shader_binary.f90 \
            $(SRC_DIR)/sparkle_amdgpu_memory.f90 \
            $(SRC_DIR)/sparkle_amdgpu_shaders.f90
            
        ifeq ($(HAS_OPENGL),yes)
            PLATFORM_MODULES += $(SRC_DIR)/sparkle_gpu_opengl.f90 \
                                $(SRC_DIR)/reference/gpu_opengl_interface.f90 \
                                $(SRC_DIR)/sparkle_gpu_dispatch.f90 \
                                $(SRC_DIR)/reference/universal_memory_optimization.f90 \
                                $(SRC_DIR)/reference/gemm_simd_optimized.f90 \
                                $(SRC_DIR)/memory_wall_breakthrough_v2.f90 \
                                $(SRC_DIR)/reference/cpu_conv2d_reference.f90 \
                                $(SRC_DIR)/reference/intelligent_device_juggling.f90 \
                                $(SRC_DIR)/production/sparkle_conv2d.f90
            PLATFORM_C_SOURCES += $(SRC_DIR)/reference/gpu_opengl_reference.c
        endif
    endif
endif

ifeq ($(PLATFORM),MACOS)
    PLATFORM_MODULES = \
        $(SRC_DIR)/sparkle_gpu_metal.f90 \
        $(SRC_DIR)/sparkle_memory_metal.f90 \
        $(SRC_DIR)/sparkle_metal_kernels.f90 \
        $(SRC_DIR)/sparkle_amx.f90 \
        $(SRC_DIR)/sparkle_neural_engine.f90 \
        $(SRC_DIR)/sparkle_apple_orchestrator.f90
        
    PLATFORM_C_SOURCES = \
        $(SRC_DIR)/metal_wrapper.m \
        $(SRC_DIR)/coreml_bridge_simple.m
endif

# All modules
MODULES = $(COMMON_MODULES) $(PLATFORM_MODULES)
OBJECTS = $(MODULES:$(SRC_DIR)/%.f90=$(BUILD_DIR)/%.o)

# Platform-specific C objects
ifeq ($(PLATFORM),MACOS)
    C_OBJECTS = $(PLATFORM_C_SOURCES:$(SRC_DIR)/%.m=$(BUILD_DIR)/%.o)
endif

ifeq ($(PLATFORM),LINUX)
    ifneq ($(strip $(PLATFORM_C_SOURCES)),)
        C_OBJECTS = $(PLATFORM_C_SOURCES:$(SRC_DIR)/%.c=$(BUILD_DIR)/%.o)
    endif
endif

# Info target
info:
	@echo "🌟 Sparkle Smart Build System"
	@echo "============================"
	@echo "Platform: $(PLATFORM)"
	@echo "Architecture: $(UNAME_M)"
	@echo "GPU: $(GPU_TYPE)"
	@echo "GPU Backend: $(GPU_BACKEND)"
	@echo "Build dir: $(BUILD_DIR)"
	@echo ""
	@echo "Available targets:"
	@echo "  make test_platform      - Test platform detection"
	@echo "  make test_gpu           - Test GPU functionality"
	@echo "  make test_amdgpu_direct - Test direct AMDGPU access"
	@echo "  make test_amdgpu_command - Test AMDGPU command submission"
	@echo "  make test_glsl_compute  - Test GLSL compute shader"
	@echo "  make test_adaptive_kernel - Test adaptive kernel framework"
	@echo "  make test_amdgpu_compute - Test AMDGPU compute shader"
	@echo "  make benchmark          - Run performance benchmarks"
	@echo ""

# Platform detection test
test_platform: $(BUILD_DIR)/test_platform
	@echo "🚀 Running platform detection..."
	@./$(BUILD_DIR)/test_platform

$(BUILD_DIR)/test_platform: $(OBJECTS) $(EXAMPLES_DIR)/test_platform.f90
	@echo "🔨 Building platform test..."
	$(FC) $(BASE_FFLAGS) -I$(BUILD_DIR) $(OBJECTS) $(C_OBJECTS) \
		$(EXAMPLES_DIR)/test_platform.f90 -o $@ $(LDFLAGS)

# GPU test (platform-specific)
ifeq ($(PLATFORM),LINUX)
test_gpu: $(BUILD_DIR)/test_gpu_$(GPU_BACKEND)
	@./$(BUILD_DIR)/test_gpu_$(GPU_BACKEND)

$(BUILD_DIR)/test_gpu_opengl: $(OBJECTS) $(EXAMPLES_DIR)/test_gpu_opengl.f90
	@echo "🔨 Building OpenGL GPU test..."
	$(FC) $(BASE_FFLAGS) -I$(BUILD_DIR) $(OBJECTS) \
		$(EXAMPLES_DIR)/test_gpu_opengl.f90 -o $@ $(LDFLAGS)

# Direct AMDGPU test
test_amdgpu_direct: $(BUILD_DIR)/test_amdgpu_direct
	@echo "🚀 Running direct AMDGPU test..."
	@./$(BUILD_DIR)/test_amdgpu_direct

$(BUILD_DIR)/test_amdgpu_direct: $(OBJECTS) $(EXAMPLES_DIR)/test_amdgpu_direct.f90
	@echo "🔨 Building direct AMDGPU test..."
	$(FC) $(BASE_FFLAGS) -I$(BUILD_DIR) $(OBJECTS) \
		$(EXAMPLES_DIR)/test_amdgpu_direct.f90 -o $@ $(LDFLAGS)

# AMDGPU command submission test
test_amdgpu_command: $(BUILD_DIR)/test_amdgpu_command
	@echo "🚀 Running AMDGPU command submission test..."
	@./$(BUILD_DIR)/test_amdgpu_command

$(BUILD_DIR)/test_amdgpu_command: $(OBJECTS) $(EXAMPLES_DIR)/test_amdgpu_command.f90
	@echo "🔨 Building AMDGPU command submission test..."
	$(FC) $(BASE_FFLAGS) -I$(BUILD_DIR) $(OBJECTS) \
		$(EXAMPLES_DIR)/test_amdgpu_command.f90 -o $@ $(LDFLAGS)

# GLSL compute shader test
test_glsl_compute: $(BUILD_DIR)/test_glsl_compute
	@echo "🚀 Running GLSL compute shader test..."
	@./$(BUILD_DIR)/test_glsl_compute

$(BUILD_DIR)/test_glsl_compute: $(OBJECTS) $(EXAMPLES_DIR)/test_glsl_compute.f90
	@echo "🔨 Building GLSL compute shader test..."
	$(FC) $(BASE_FFLAGS) -I$(BUILD_DIR) $(OBJECTS) \
		$(EXAMPLES_DIR)/test_glsl_compute.f90 -o $@ $(LDFLAGS)

# Adaptive kernel test
test_adaptive_kernel: $(BUILD_DIR)/test_adaptive_kernel
	@echo "🚀 Running adaptive kernel test..."
	@./$(BUILD_DIR)/test_adaptive_kernel

$(BUILD_DIR)/test_adaptive_kernel: $(OBJECTS) $(EXAMPLES_DIR)/test_adaptive_kernel.f90
	@echo "🔨 Building adaptive kernel test..."
	$(FC) $(BASE_FFLAGS) -I$(BUILD_DIR) $(OBJECTS) \
		$(EXAMPLES_DIR)/test_adaptive_kernel.f90 -o $@ $(LDFLAGS)

# AMDGPU compute shader test
test_amdgpu_compute: $(BUILD_DIR)/test_amdgpu_compute
	@echo "🚀 Running AMDGPU compute shader test..."
	@./$(BUILD_DIR)/test_amdgpu_compute

$(BUILD_DIR)/test_amdgpu_compute: $(OBJECTS) $(EXAMPLES_DIR)/test_amdgpu_compute.f90
	@echo "🔨 Building AMDGPU compute shader test..."
	$(FC) $(BASE_FFLAGS) -I$(BUILD_DIR) $(OBJECTS) \
		$(EXAMPLES_DIR)/test_amdgpu_compute.f90 -o $@ $(LDFLAGS)

# Simple write test
test_simple_write: $(BUILD_DIR)/test_simple_write
	@echo "🚀 Running simple GPU write/read test..."
	@./$(BUILD_DIR)/test_simple_write

$(BUILD_DIR)/test_simple_write: $(OBJECTS) $(EXAMPLES_DIR)/test_simple_write.f90
	@echo "🔨 Building simple write test..."
	$(FC) $(BASE_FFLAGS) -I$(BUILD_DIR) $(OBJECTS) \
		$(EXAMPLES_DIR)/test_simple_write.f90 -o $@ $(LDFLAGS)

# AMD convolution test  
test_amd_convolution: $(BUILD_DIR)/test_conv_gemm_gpu
	@echo "🚀 Running AMD GPU convolution test..."
	@./$(BUILD_DIR)/test_conv_gemm_gpu

$(BUILD_DIR)/test_conv_gemm_gpu: $(OBJECTS) $(EXAMPLES_DIR)/test_conv_gemm_gpu.f90
	@echo "🔨 Building AMD convolution test..."
	$(FC) $(BASE_FFLAGS) -I$(BUILD_DIR) $(OBJECTS) \
		$(EXAMPLES_DIR)/test_conv_gemm_gpu.f90 -o $@ $(LDFLAGS)

# GLSL compute test
test_glsl_compute_real: $(BUILD_DIR)/test_glsl_simple
	@echo "🚀 Running GLSL compute shader test..."
	@./$(BUILD_DIR)/test_glsl_simple

$(BUILD_DIR)/test_glsl_simple: $(EXAMPLES_DIR)/test_glsl_simple.f90
	@echo "🔨 Building GLSL compute test..."
	$(FC) $(BASE_FFLAGS) $(EXAMPLES_DIR)/test_glsl_simple.f90 -o $@ -lGL -lEGL

# ===== Safe GPU test targets =====

# Pick the device explicitly (default to iGPU render; override at CLI)
RUN_DEVICE ?= /dev/dri/renderD129  # iGPU (Raphael)
# alt: RUN_DEVICE=/dev/dri/renderD128  # dGPU (7900 XT)

BIN_PM4 := $(BUILD_DIR)/test_minimal_pm4
BIN_GL  := $(BUILD_DIR)/test_glsl_debug

.PHONY: build_gpu run_pm4 run_gl run_dry

build_gpu: $(BIN_PM4) $(BIN_GL)

# --- SAFE RUN MODES (no auto-run during build) ---

run_pm4:
	@echo ">>> RUNNING PM4 on $(RUN_DEVICE)"
	SPORKLE_DRI=$(RUN_DEVICE) $(BIN_PM4) --safe --once

run_gl:
	@echo ">>> RUNNING GL compute on $(RUN_DEVICE)"
	SPORKLE_DRI=$(RUN_DEVICE) $(BIN_GL) --safe --once

# dry-run prints the PM4 chunk/IB but does NOT submit
run_dry:
	@echo ">>> DRY-RUN PM4 on $(RUN_DEVICE)"
	SPORKLE_DRI=$(RUN_DEVICE) $(BIN_PM4) --dry-run

# Build targets (no auto-run)
$(BUILD_DIR)/test_minimal_pm4: $(OBJECTS) $(EXAMPLES_DIR)/test_minimal_pm4.f90
	@echo "🔨 Building minimal PM4 test..."
	$(FC) $(BASE_FFLAGS) -I$(BUILD_DIR) $(OBJECTS) \
		$(EXAMPLES_DIR)/test_minimal_pm4.f90 -o $@ $(LDFLAGS)

$(BUILD_DIR)/test_glsl_debug: $(EXAMPLES_DIR)/test_glsl_debug.f90
	@echo "🔨 Building GL debug test..."
	$(FC) $(BASE_FFLAGS) $(EXAMPLES_DIR)/test_glsl_debug.f90 -o $@ -lGL -lEGL

# Fortran shader test
test_fortran_shader: $(BUILD_DIR)/test_fortran_shader
	@echo "🚀 Running Fortran shader test..."
	@./$(BUILD_DIR)/test_fortran_shader

$(BUILD_DIR)/test_fortran_shader: $(OBJECTS) $(EXAMPLES_DIR)/test_fortran_shader.f90
	@echo "🔨 Building Fortran shader test..."
	$(FC) $(BASE_FFLAGS) -I$(BUILD_DIR) $(OBJECTS) \
		$(EXAMPLES_DIR)/test_fortran_shader.f90 -o $@ $(LDFLAGS)

# Universal memory optimization test
test_universal_memory_optimization: $(BUILD_DIR)/test_universal_memory_optimization
	@echo "🚀 Testing universal memory optimization patterns..."
	@./$(BUILD_DIR)/test_universal_memory_optimization

$(BUILD_DIR)/test_universal_memory_optimization: $(OBJECTS) $(C_OBJECTS) $(EXAMPLES_DIR)/test_universal_memory_optimization.f90
	@echo "🔨 Building universal memory optimization test..."
	$(FC) $(BASE_FFLAGS) -I$(BUILD_DIR) $(OBJECTS) $(C_OBJECTS) \
		$(EXAMPLES_DIR)/test_universal_memory_optimization.f90 -o $@ $(LDFLAGS)

# Intelligent device juggling test
test_intelligent_device_juggling: $(BUILD_DIR)/test_intelligent_device_juggling
	@echo "🧠 Testing intelligent device juggling system..."
	@./$(BUILD_DIR)/test_intelligent_device_juggling

$(BUILD_DIR)/test_intelligent_device_juggling: $(OBJECTS) $(C_OBJECTS) $(EXAMPLES_DIR)/test_intelligent_device_juggling.f90
	@echo "🔨 Building intelligent device juggling test..."
	$(FC) $(BASE_FFLAGS) -I$(BUILD_DIR) $(OBJECTS) $(C_OBJECTS) \
		$(EXAMPLES_DIR)/test_intelligent_device_juggling.f90 -o $@ $(LDFLAGS)

# Benchmarks
benchmark_saxpy: $(BUILD_DIR)/benchmark_saxpy
	@echo "📊 Running SAXPY benchmark..."
	@./$(BUILD_DIR)/benchmark_saxpy

$(BUILD_DIR)/benchmark_saxpy: $(OBJECTS) $(EXAMPLES_DIR)/benchmark_saxpy.f90
	@echo "🔨 Building SAXPY benchmark..."
	$(FC) $(BASE_FFLAGS) -I$(BUILD_DIR) $(OBJECTS) \
		$(EXAMPLES_DIR)/benchmark_saxpy.f90 -o $@ $(LDFLAGS)
endif

ifeq ($(PLATFORM),MACOS)
test_gpu: $(BUILD_DIR)/test_metal_vs_mock
	@./$(BUILD_DIR)/test_metal_vs_mock
endif

# Compile rules
$(BUILD_DIR)/%.o: $(SRC_DIR)/%.f90
	@echo "📦 Compiling $< for $(PLATFORM)..."
	$(FC) $(BASE_FFLAGS) -c $< -o $@ -J$(BUILD_DIR)

$(BUILD_DIR)/reference/%.o: $(SRC_DIR)/reference/%.f90
	@echo "📦 Compiling $< (reference) for $(PLATFORM)..."
	$(FC) $(BASE_FFLAGS) -c $< -o $@ -J$(BUILD_DIR)

$(BUILD_DIR)/production/%.o: $(SRC_DIR)/production/%.f90
	@echo "📦 Compiling $< (production) for $(PLATFORM)..."
	$(FC) $(BASE_FFLAGS) -c $< -o $@ -J$(BUILD_DIR)

$(BUILD_DIR)/reference/%.o: $(SRC_DIR)/reference/%.c
	@echo "⚙️  Compiling $< (reference C)..."
	$(CC) $(BASE_CFLAGS) $(CFLAGS) -c $< -o $@

$(BUILD_DIR)/%.o: $(SRC_DIR)/%.m
	@echo "🎮 Compiling $< (Objective-C)..."
	$(CC) $(BASE_CFLAGS) -fobjc-arc -c $< -o $@

$(BUILD_DIR)/%.o: $(SRC_DIR)/%.c
	@echo "⚙️  Compiling $< (C)..."
	$(CC) $(BASE_CFLAGS) $(CFLAGS) -c $< -o $@

# Clean
clean:
	@echo "🧹 Cleaning $(PLATFORM) build..."
	rm -rf $(BUILD_DIR)

# Clean all platforms
clean-all:
	@echo "🧹 Cleaning all builds..."
	rm -rf build/

# Adaptive convolution test
test_adaptive_convolution: $(BUILD_DIR)/test_adaptive_convolution
	@echo "🚀 Running adaptive convolution test..."
	@./$(BUILD_DIR)/test_adaptive_convolution
$(BUILD_DIR)/test_adaptive_convolution: $(OBJECTS) $(EXAMPLES_DIR)/test_adaptive_convolution.f90
	@echo "🔨 Building adaptive convolution test..."
	$(FC) $(BASE_FFLAGS) -I$(BUILD_DIR) $(OBJECTS) \
		$(EXAMPLES_DIR)/test_adaptive_convolution.f90 -o $@ $(LDFLAGS)

# Convolution benchmark
benchmark_convolution: $(BUILD_DIR)/benchmark_convolution
	@echo "📊 Running convolution benchmark..."
	@./$(BUILD_DIR)/benchmark_convolution
$(BUILD_DIR)/benchmark_convolution: $(OBJECTS) $(EXAMPLES_DIR)/benchmark_convolution.f90
	@echo "🔨 Building convolution benchmark..."
	$(FC) $(BASE_FFLAGS) -I$(BUILD_DIR) $(OBJECTS) \
		$(EXAMPLES_DIR)/benchmark_convolution.f90 -o $@ $(LDFLAGS)

# Production interface test
test_production_conv2d: $(BUILD_DIR)/test_production_conv2d
	@echo "🧪 Testing production conv2d interface..."
	@./$(BUILD_DIR)/test_production_conv2d
$(BUILD_DIR)/test_production_conv2d: $(OBJECTS) $(C_OBJECTS) $(EXAMPLES_DIR)/test_production_conv2d.f90
	@echo "🔨 Building production conv2d test..."
	$(FC) $(BASE_FFLAGS) -I$(BUILD_DIR) $(OBJECTS) $(C_OBJECTS) \
		$(EXAMPLES_DIR)/test_production_conv2d.f90 -o $@ $(LDFLAGS)

# Memory wall breakthrough test
test_memory_wall_breakthrough: $(BUILD_DIR)/test_memory_wall_breakthrough
	@echo "🚀 Testing memory wall breakthrough..."
	@OMP_NUM_THREADS=16 ./$(BUILD_DIR)/test_memory_wall_breakthrough

$(BUILD_DIR)/test_memory_wall_breakthrough: $(OBJECTS) $(C_OBJECTS) $(EXAMPLES_DIR)/test_memory_wall_breakthrough.f90
	@echo "🔨 Building memory wall breakthrough test..."
	$(FC) $(BASE_FFLAGS) -I$(BUILD_DIR) $(OBJECTS) $(C_OBJECTS) \
		$(EXAMPLES_DIR)/test_memory_wall_breakthrough.f90 -o $@ $(LDFLAGS)

# RDNA shader optimization test
test_rdna_shader_optimization: $(BUILD_DIR)/test_rdna_shader_optimization
	@echo "🚀 Testing RDNA shader optimization..."
	@./$(BUILD_DIR)/test_rdna_shader_optimization

$(BUILD_DIR)/test_rdna_shader_optimization: $(OBJECTS) $(C_OBJECTS) $(EXAMPLES_DIR)/test_rdna_shader_optimization.f90
	@echo "🔨 Building RDNA shader optimization test..."
	$(FC) $(BASE_FFLAGS) -I$(BUILD_DIR) $(OBJECTS) $(C_OBJECTS) \
		$(EXAMPLES_DIR)/test_rdna_shader_optimization.f90 -o $@ $(LDFLAGS)

# Dynamic shader system test
test_dynamic_shader_system: $(BUILD_DIR)/test_dynamic_shader_system
	@echo "🚀 Testing dynamic shader system..."
	@./$(BUILD_DIR)/test_dynamic_shader_system

$(BUILD_DIR)/test_dynamic_shader_system: $(BUILD_DIR)/sparkle_types.o $(BUILD_DIR)/sparkle_glsl_generator.o $(BUILD_DIR)/sparkle_rdna_shader_generator.o $(BUILD_DIR)/sparkle_dynamic_shader_system.o $(EXAMPLES_DIR)/test_dynamic_shader_system.f90
	@echo "🔨 Building dynamic shader system test..."
	$(FC) $(BASE_FFLAGS) -I$(BUILD_DIR) \
		$(BUILD_DIR)/sparkle_types.o \
		$(BUILD_DIR)/sparkle_glsl_generator.o \
		$(BUILD_DIR)/sparkle_rdna_shader_generator.o \
		$(BUILD_DIR)/sparkle_dynamic_shader_system.o \
		$(EXAMPLES_DIR)/test_dynamic_shader_system.f90 -o $@

# Memory wall simple test
test_memory_wall_simple: $(BUILD_DIR)/test_memory_wall_simple
	@echo "🚀 Testing memory wall breakthrough (simple)..."
	@OMP_NUM_THREADS=16 ./$(BUILD_DIR)/test_memory_wall_simple

$(BUILD_DIR)/test_memory_wall_simple: $(OBJECTS) $(C_OBJECTS) $(EXAMPLES_DIR)/test_memory_wall_simple.f90
	@echo "🔨 Building memory wall simple test..."
	$(FC) $(BASE_FFLAGS) -I$(BUILD_DIR) $(OBJECTS) $(C_OBJECTS) \
		$(EXAMPLES_DIR)/test_memory_wall_simple.f90 -o $@ $(LDFLAGS)

# Test peak CPU performance
test_peak_cpu: $(BUILD_DIR)/test_peak_cpu_performance
	@echo "🚀 Testing peak CPU performance..."
	@OMP_NUM_THREADS=32 ./$(BUILD_DIR)/test_peak_cpu_performance

$(BUILD_DIR)/test_peak_cpu_performance: $(OBJECTS) $(C_OBJECTS) $(EXAMPLES_DIR)/test_peak_cpu_performance.f90
	@echo "🔨 Building peak CPU performance test..."
	$(FC) $(BASE_FFLAGS) -I$(BUILD_DIR) $(OBJECTS) $(C_OBJECTS) \
		$(EXAMPLES_DIR)/test_peak_cpu_performance.f90 -o $@ $(LDFLAGS)

# Test SIMD performance
test_simd: $(BUILD_DIR)/test_simd_performance
	@echo "🚀 Testing SIMD performance..."
	@OMP_NUM_THREADS=16 ./$(BUILD_DIR)/test_simd_performance

$(BUILD_DIR)/test_simd_performance: $(OBJECTS) $(C_OBJECTS) $(EXAMPLES_DIR)/test_simd_performance.f90
	@echo "🔨 Building SIMD performance test..."
	$(FC) $(BASE_FFLAGS) -I$(BUILD_DIR) $(OBJECTS) $(C_OBJECTS) \
		$(EXAMPLES_DIR)/test_simd_performance.f90 -o $@ $(LDFLAGS)

.PHONY: info test_platform test_gpu clean clean-all test_adaptive_convolution benchmark_convolution test_production_conv2d test_memory_wall_breakthrough test_memory_wall_simple test_peak_cpu test_simd