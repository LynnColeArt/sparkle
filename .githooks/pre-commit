#!/bin/bash
# Mini's Integrity Checking Pre-commit Hook
# =========================================
# Runs automated checks to catch common Fortran issues before commit

set -e

echo "üîç Running Mini's integrity checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Track if any issues found
ISSUES_FOUND=0

# Get list of staged Fortran files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.f90$' || true)

if [ -z "$STAGED_FILES" ]; then
  echo "No Fortran files staged for commit."
  exit 0
fi

echo "Checking $(echo "$STAGED_FILES" | wc -l) staged Fortran files..."
echo ""

# Check 1: Mixed-kind arithmetic
echo "1Ô∏è‚É£  Checking for mixed-kind arithmetic..."
for file in $STAGED_FILES; do
  # Check for literals without kind suffixes in arithmetic
  if grep -E '[0-9]+\.[0-9]+\s*[\*/\+\-]|[\*/\+\-]\s*[0-9]+\.[0-9]+' "$file" | grep -v '_sp\|_dp\|_i32\|_i64' > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Mixed-kind arithmetic risk in $file${NC}"
    echo "   Found literals without kind suffixes in arithmetic operations"
    ISSUES_FOUND=$((ISSUES_FOUND + 1))
  fi
done

# Check 2: system_clock usage without time_utils
echo ""
echo "2Ô∏è‚É£  Checking for raw system_clock usage..."
for file in $STAGED_FILES; do
  if grep -E 'call\s+system_clock' "$file" | grep -v 'time_utils' > /dev/null 2>&1; then
    if ! grep -q 'use time_utils' "$file"; then
      echo -e "${RED}‚ùå Raw system_clock usage in $file${NC}"
      echo "   Should use time_utils module for correct timing"
      ISSUES_FOUND=$((ISSUES_FOUND + 1))
    fi
  fi
done

# Check 3: FLOP calculations without flopcount module
echo ""
echo "3Ô∏è‚É£  Checking for manual FLOP calculations..."
for file in $STAGED_FILES; do
  if grep -E 'flops?\s*=.*\*.*\*' "$file" | grep -v 'use flopcount' > /dev/null 2>&1; then
    if ! grep -q 'use flopcount' "$file"; then
      echo -e "${YELLOW}‚ö†Ô∏è  Manual FLOP calculation in $file${NC}"
      echo "   Consider using flopcount module for 64-bit safety"
    fi
  fi
done

# Check 4: iso_fortran_env usage (should use kinds)
echo ""
echo "4Ô∏è‚É£  Checking for iso_fortran_env usage..."
for file in $STAGED_FILES; do
  if grep -E 'use.*iso_fortran_env' "$file" | grep -v 'error_unit' | grep -v 'kinds\.f90' > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Direct iso_fortran_env usage in $file${NC}"
    echo "   Should use kinds module instead"
    ISSUES_FOUND=$((ISSUES_FOUND + 1))
  fi
done

# Check 5: Integer literals in c_f_pointer shape
echo ""
echo "5Ô∏è‚É£  Checking c_f_pointer shape arguments..."
for file in $STAGED_FILES; do
  if grep -E 'c_f_pointer.*\[[0-9]+\]' "$file" > /dev/null 2>&1; then
    echo -e "${YELLOW}‚ö†Ô∏è  Literal in c_f_pointer shape in $file${NC}"
    echo "   Consider using explicit integer kind for portability"
  fi
done

# Check 6: 1.0e6 instead of 1.0d6 for GFLOPS
echo ""
echo "6Ô∏è‚É£  Checking GFLOPS calculations..."
for file in $STAGED_FILES; do
  if grep -E 'gflops.*1\.0e[0-9]' "$file" > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Single precision literal in GFLOPS calc in $file${NC}"
    echo "   Use 1.0d6 or 1.0_dp instead of 1.0e6"
    ISSUES_FOUND=$((ISSUES_FOUND + 1))
  fi
done

# Check 7: Check for proper error handling
echo ""
echo "7Ô∏è‚É£  Checking error handling patterns..."
for file in $STAGED_FILES; do
  # Check for allocate without stat=
  if grep -E 'allocate\s*\([^)]+\)' "$file" | grep -v 'stat\s*=' > /dev/null 2>&1; then
    echo -e "${YELLOW}‚ö†Ô∏è  Allocate without stat= in $file${NC}"
    echo "   Consider adding error checking"
  fi
done

# Summary
echo ""
echo "="
if [ $ISSUES_FOUND -gt 0 ]; then
  echo -e "${RED}‚ùå Found $ISSUES_FOUND critical issues that should be fixed.${NC}"
  echo ""
  echo "To bypass this check (not recommended):"
  echo "  git commit --no-verify"
  exit 1
else
  echo -e "${GREEN}‚úÖ All integrity checks passed!${NC}"
  echo "Mini approves this commit. üéâ"
fi

exit 0