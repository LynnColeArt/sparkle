# Sporkle Linux Makefile - Automatic Dependency Tracking
# ======================================================

# Compiler settings
FC = gfortran
FFLAGS = -O3 -march=native -fopenmp -ffast-math
MODDIR = build/modules
OBJDIR = build/objects
DEPDIR = build/deps

# OpenGL/EGL libraries
GL_LIBS = -lGL -lEGL

# Directories
COMMON_DIR = src/common
PROD_DIR = src/production
REF_DIR = src/reference
TEST_DIR = tests
EXAMPLE_DIR = examples

# Module build order (based on dependency analysis)
# Layer 0: No dependencies
LAYER0_SRCS = \
	$(COMMON_DIR)/kinds.f90

# Layer 1: Depends only on Layer 0
LAYER1_SRCS = \
	$(COMMON_DIR)/flopcount.f90 \
	$(COMMON_DIR)/time_utils.f90 \
	$(COMMON_DIR)/stable_math.f90 \
	$(COMMON_DIR)/c_ptr_utils.f90 \
	src/sporkle_error_handling.f90

# Layer 2: Basic types and interfaces
LAYER2_SRCS = \
	src/sporkle_types.f90 \
	src/sporkle_config.f90 \
	src/sporkle_mesh_types.f90 \
	src/gl_constants.f90 \
	src/sporkle_gpu_safe_detect.f90 \
	src/sporkle_amdgpu_direct.f90 \
	src/sporkle_amdgpu_memory.f90 \
	$(PROD_DIR)/gpu_opengl_interface.f90 \
	$(PROD_DIR)/timing_helpers.f90

# Layer 3: Core functionality
LAYER3_SRCS = \
	src/sporkle_memory.f90 \
	src/sporkle_kernels.f90 \
	src/sporkle_gpu_kernels.f90 \
	$(PROD_DIR)/gemm_simd_optimized.f90 \
	$(PROD_DIR)/gemm_simd_optimized_v2.f90 \
	$(PROD_DIR)/gpu_program_cache.f90 \
	$(PROD_DIR)/gpu_binary_cache.f90

# Layer 4: Advanced modules
LAYER4_SRCS = \
	$(PROD_DIR)/gpu_program_cache_threadsafe.f90 \
	$(PROD_DIR)/universal_memory_optimization.f90 \
	$(REF_DIR)/cpu_conv2d_reference.f90 \
	src/sporkle_glsl_generator.f90 \
	src/sporkle_rdna_shader_generator.f90 \
	src/sporkle_dynamic_shader_system.f90 \
	src/sporkle_universal_device_selector.f90 \
	src/sporkle_gpu_dispatch.f90

# Layer 5: High-level modules
LAYER5_SRCS = \
	$(PROD_DIR)/gpu_dynamic_shader_cache_stub.f90 \
	$(PROD_DIR)/cpu_conv2d_adaptive.f90 \
	$(PROD_DIR)/gpu_async_executor.f90 \
	$(PROD_DIR)/sporkle_conv2d_v2.f90

# All source files in order
SRCS = $(LAYER0_SRCS) $(LAYER1_SRCS) $(LAYER2_SRCS) $(LAYER3_SRCS) $(LAYER4_SRCS) $(LAYER5_SRCS)

# Find remaining source files not explicitly ordered
ALL_SRCS := $(wildcard src/*.f90 $(COMMON_DIR)/*.f90 $(PROD_DIR)/*.f90 $(REF_DIR)/*.f90)
REMAINING_SRCS := $(filter-out $(SRCS),$(ALL_SRCS))
SRCS += $(REMAINING_SRCS)

# Test sources
TEST_IMPL_SRCS = \
	$(TEST_DIR)/performance_regression_impl.f90 \
	$(TEST_DIR)/performance_regression_test.f90

# Object files
OBJS := $(SRCS:%.f90=$(OBJDIR)/%.o)
TEST_OBJS := $(TEST_IMPL_SRCS:%.f90=$(OBJDIR)/%.o)

# Executables
PERF_TEST = $(TEST_DIR)/performance_regression_test
SANITY_TEST = $(TEST_DIR)/sanity_test

# Default target
.PHONY: all
all: dirs $(PERF_TEST)

# Create directories
.PHONY: dirs
dirs:
	@mkdir -p $(MODDIR) $(OBJDIR)/src $(OBJDIR)/src/common $(OBJDIR)/src/production $(OBJDIR)/src/reference $(OBJDIR)/tests $(DEPDIR)

# Compile rules for each layer
$(OBJDIR)/%.o: %.f90 | dirs
	@echo "Compiling $(notdir $<)..."
	@$(FC) $(FFLAGS) -c $< -J $(MODDIR) -I $(MODDIR) -o $@

# Special rule for kinds module (no dependencies)
$(OBJDIR)/$(COMMON_DIR)/kinds.o: $(COMMON_DIR)/kinds.f90 | dirs
	@echo "Compiling kinds.f90 (base module)..."
	@$(FC) $(FFLAGS) -c $< -J $(MODDIR) -o $@

# Performance test needs special handling
$(PERF_TEST): $(OBJS) $(TEST_OBJS)
	@echo "Linking performance regression test..."
	@$(FC) $(FFLAGS) $^ -o $@ -lgomp $(GL_LIBS)

# Build sanity test if it exists
$(SANITY_TEST): $(OBJDIR)/tests/sanity_main.o $(OBJS)
	@echo "Linking sanity test..."
	@$(FC) $(FFLAGS) $^ -o $@ -lgomp

# Clean
.PHONY: clean
clean:
	rm -rf build/
	rm -f $(PERF_TEST) $(SANITY_TEST)
	rm -f module_dependencies.txt dependency_map.txt

# Run tests
.PHONY: test
test: $(PERF_TEST)
	@echo ""
	@echo "Running performance regression tests..."
	@cd tests && ./performance_regression_test

# Quick build test
.PHONY: quick-test
quick-test: dirs
	@echo "Quick build test - compiling core modules only..."
	@$(FC) $(FFLAGS) -c $(COMMON_DIR)/kinds.f90 -J $(MODDIR) -o $(OBJDIR)/src/common/kinds.o
	@$(FC) $(FFLAGS) -c $(COMMON_DIR)/flopcount.f90 -J $(MODDIR) -I $(MODDIR) -o $(OBJDIR)/src/common/flopcount.o
	@$(FC) $(FFLAGS) -c $(COMMON_DIR)/time_utils.f90 -J $(MODDIR) -I $(MODDIR) -o $(OBJDIR)/src/common/time_utils.o
	@echo "âœ… Core modules compiled successfully!"

# Show build info
.PHONY: info
info:
	@echo "Sporkle Linux Build System"
	@echo "========================="
	@echo ""
	@echo "Modules found: $(words $(SRCS))"
	@echo "Build directory: build/"
	@echo "Compiler: $(FC)"
	@echo "Flags: $(FFLAGS)"
	@echo ""
	@echo "Layered build order:"
	@echo "  Layer 0: $(words $(LAYER0_SRCS)) modules (no dependencies)"
	@echo "  Layer 1: $(words $(LAYER1_SRCS)) modules (basic utilities)"
	@echo "  Layer 2: $(words $(LAYER2_SRCS)) modules (types & interfaces)"
	@echo "  Layer 3: $(words $(LAYER3_SRCS)) modules (core functionality)"
	@echo "  Layer 4: $(words $(LAYER4_SRCS)) modules (advanced features)"
	@echo "  Layer 5: $(words $(LAYER5_SRCS)) modules (high-level APIs)"
	@echo "  Remaining: $(words $(REMAINING_SRCS)) modules"

# Help
.PHONY: help
help:
	@echo "Sporkle Linux Build System"
	@echo "========================="
	@echo ""
	@echo "Targets:"
	@echo "  all         - Build performance tests (default)"
	@echo "  test        - Build and run tests"
	@echo "  clean       - Remove all build artifacts"
	@echo "  quick-test  - Test core module compilation"
	@echo "  info        - Show build configuration"
	@echo "  help        - Show this help message"
	@echo ""
	@echo "Usage:"
	@echo "  make -f Makefile.linux        # Build tests"
	@echo "  make -f Makefile.linux test   # Run tests"
	@echo "  make -f Makefile.linux clean  # Clean build"